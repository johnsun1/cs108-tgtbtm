<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text = "";
image_speed = 0;
owner = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do something when a menu item is clicked

if (string_pos("Player 1", other.text) &gt; 0) {
        attacker = "None"; //Place holder for identity of attacker
        attack_roll = 0;
        target_roll = irandom_range(1,6); //Player 1 is the defender
        if (global.current_player == 2) {
            attacker_roll = irandom_range(1, 6); //Player 2 is the attacker
            attacker = "p2";
        } else if (global.current_player == 3) {
            attacker_roll = irandom_range(1, 6); //Player 3 is the attacker
            attacker = "p3";
        }
        
        // Determine who takes how much damage
        if (target_roll &gt; attacker_roll) {
            //Attacker takes damage
            if (attacker == "p2") {
                global.p2_health -= target_roll+global.p1_attack;
            } else if (attacker == "p3") {
                global.p3_health -= target_roll+global.p1_attack;
            }
        } else {
            //Defender takes damage
            if (attacker == "p2") {
                global.p1_health -= attack_roll + global.p2_attack;
            } else {
                global.p1_health -= attack_roll + global.p3_attack;
            }
        }
} else if (string_pos("Player 2", other.text) &gt; 0) {
        attacker = "None"; //Place holder for identity of attacker
        attack_roll = 0;
        target_roll = irandom_range(1,6); //Player 2 is the defender
        if (global.current_player == 1) {
            attacker_roll = irandom_range(1, 6); //Player 1 is the attacker
            attacker = "p1";
        } else if (global.current_player == 3) {
            attacker_roll = irandom_range(1, 6); //Player 3 is the attacker
            attacker = "p3";
        }
        
        // Determine who takes how much damage
        if (target_roll &gt; attacker_roll) {
            //Attacker takes damage
            if (attacker == "p1") {
                global.p1_health -= target_roll+global.p2_attack;
            } else if (attacker == "p3"){
                global.p3_health -= target_roll+global.p2_attack;
            }
        } else {
            //Defender takes damage
            if (attacker == "p1") {
                global.p2_health -= attack_roll + global.p1_attack;
            } else {
                global.p2_health -= attack_roll + global.p3_attack;
            }
        }
} else if (string_pos("Player 3", other.text) &gt; 0) {
        attacker = "None"; //Place holder for identity of attacker
        attack_roll = 0;
        target_roll = irandom_range(1,6); //Player 3 is the defender
        if (global.current_player == 1) {
            attacker_roll = irandom_range(1, 6); //Player 1 is the attacker
            attacker = "p1";
        } else if (global.current_player == 2) {
            attacker_roll = irandom_range(1, 6); //Player 2 is the attacker
            attacker = "p2";
        }
        
        // Determine who takes how much damage
        if (target_roll &gt; attacker_roll) {
            //Attacker takes damage
            if (attacker == "p1") {
                global.p1_health -= target_roll+global.p3_attack;
            } else {
                global.p2_health -= target_roll+global.p3_attack;
            }
        } else {
            //Defender takes damage
            if (attacker == "p1") {
                global.p3_health -= attack_roll + global.p1_attack;
            } else {
                global.p3_health -= attack_roll + global.p2_attack;
            }
        }
}

with (obj_attack_menu_item)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw drop-down menu options
draw_self();
draw_set_colour(c_black);
draw_set_font(fnt_button);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(x, y, string(text));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
